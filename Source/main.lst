CCS PCH C Compiler, Version 5.101, 43599               22-Mar-22 09:11

               Filename:   C:\Project\SPKT-KIT\Source\main.lst

               ROM used:   2996 bytes (2%)
                           Largest free fragment is 65536
               RAM used:   115 (3%) at main() level
                           132 (3%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 31

*
00000:  GOTO   09B4
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  FF8,18
00048:  MOVFF  FFB,19
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  F9D.0
0005E:  GOTO   0068
00062:  BTFSC  F9E.0
00064:  GOTO   00E2
00068:  MOVFF  0E,00
0006C:  MOVFF  0F,01
00070:  MOVFF  10,02
00074:  MOVFF  11,03
00078:  MOVFF  0C,FE9
0007C:  MOVFF  07,FEA
00080:  BSF    07.7
00082:  MOVFF  08,FE1
00086:  MOVFF  09,FE2
0008A:  MOVFF  0A,FD9
0008E:  MOVFF  0B,FDA
00092:  MOVFF  12,FF3
00096:  MOVFF  13,FF4
0009A:  MOVFF  14,FFA
0009E:  MOVFF  15,FF5
000A2:  MOVFF  16,FF6
000A6:  MOVFF  17,FF7
000AA:  MOVFF  18,FF8
000AE:  MOVFF  19,FFB
000B2:  MOVF   04,W
000B4:  MOVFF  06,FE0
000B8:  MOVFF  05,FD8
000BC:  RETFIE 0
.................... #include <main.h>
.................... #include <18F6722.h>
.................... //////////// Standard Header file for the PIC18F6722 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F6722
000BE:  CLRF   FF7
000C0:  ADDLW  D2
000C2:  MOVWF  FF6
000C4:  MOVLW  00
000C6:  ADDWFC FF7,F
000C8:  MOVLW  00
000CA:  MOVWF  FF8
000CC:  TBLRD*+
000CE:  MOVF   FF5,W
000D0:  RETURN 0
000D2:  DATA C0,F9
000D4:  DATA A4,B0
000D6:  DATA 99,92
000D8:  DATA 82,F8
000DA:  DATA 80,90
000DC:  DATA 88,83
000DE:  DATA C6,A1
000E0:  DATA 86,8E
*
00284:  MOVF   x71,W
00286:  CLRF   01
00288:  SUBWF  x70,W
0028A:  BC    0292
0028C:  MOVFF  70,00
00290:  BRA    02AA
00292:  CLRF   00
00294:  MOVLW  08
00296:  MOVWF  x72
00298:  RLCF   x70,F
0029A:  RLCF   00,F
0029C:  MOVF   x71,W
0029E:  SUBWF  00,W
002A0:  BTFSC  FD8.0
002A2:  MOVWF  00
002A4:  RLCF   01,F
002A6:  DECFSZ x72,F
002A8:  BRA    0298
002AA:  RETURN 0
002AC:  MOVF   x73,W
002AE:  ANDLW  07
002B0:  MOVWF  00
002B2:  RRCF   x73,W
002B4:  MOVWF  01
002B6:  RRCF   01,F
002B8:  RRCF   01,F
002BA:  MOVLW  1F
002BC:  ANDWF  01,F
002BE:  MOVF   01,W
002C0:  ADDWF  x75,W
002C2:  MOVWF  FE9
002C4:  MOVLW  00
002C6:  ADDWFC x76,W
002C8:  MOVWF  FEA
002CA:  CLRF   01
002CC:  INCF   01,F
002CE:  INCF   00,F
002D0:  BRA    02D4
002D2:  RLCF   01,F
002D4:  DECFSZ 00,F
002D6:  BRA    02D2
002D8:  MOVF   x74,F
002DA:  BZ    02E2
002DC:  MOVF   01,W
002DE:  IORWF  FEF,F
002E0:  BRA    02E8
002E2:  COMF   01,F
002E4:  MOVF   01,W
002E6:  ANDWF  FEF,F
002E8:  RETURN 0
002EA:  MOVF   x73,W
002EC:  ANDLW  07
002EE:  MOVWF  00
002F0:  RRCF   x73,W
002F2:  MOVWF  01
002F4:  RRCF   01,F
002F6:  RRCF   01,F
002F8:  MOVLW  1F
002FA:  ANDWF  01,F
002FC:  MOVF   01,W
002FE:  ADDWF  x74,W
00300:  MOVWF  FE9
00302:  MOVLW  00
00304:  ADDWFC x75,W
00306:  MOVWF  FEA
00308:  MOVFF  FEF,01
0030C:  INCF   00,F
0030E:  BRA    0312
00310:  RRCF   01,F
00312:  DECFSZ 00,F
00314:  BRA    0310
00316:  MOVLW  01
00318:  ANDWF  01,F
0031A:  RETURN 0
.................... 
.................... #list
.................... 
.................... #include <stdint.h>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                           stdint.h                                ////
.................... ////                                                                   ////
.................... //// Standard integer definitions.                                     ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STDINT
.................... 
.................... #define _STDINT
.................... 
.................... //////////// exact width
.................... 
.................... typedef signed int8 int8_t;
.................... typedef unsigned int8 uint8_t;
.................... typedef signed int16 int16_t;
.................... typedef unsigned int16 uint16_t;
.................... typedef signed int32 int32_t;
.................... typedef unsigned int32 uint32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int24_t;
.................... //typedef unsigned int24 uint24_t;
.................... typedef signed int64 int64_t;
.................... typedef unsigned int64 uint64_t;
.................... #endif
.................... 
.................... #define INT8_MAX  (127)
.................... #define INT8_MIN  (-128)
.................... #define UINT8_MAX (255)
.................... 
.................... #define INT16_MAX  (32767)
.................... #define INT16_MIN  (-32768)
.................... #define UINT16_MAX (65535)
.................... 
.................... #define INT32_MAX  (2147483647)
.................... #define INT32_MIN  (-2147483648)
.................... #define UINT32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT24_MAX  (8388607)
.................... //#define INT24_MIN  (-8388608)
.................... //#define UINT24_MAX (16777215)
.................... 
.................... #define INT64_MAX  (9223372036854775807)
.................... #define INT64_MIN  (-9223372036854775808)
.................... #define UINT64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// minimum width
.................... 
.................... typedef signed int8 int_least8_t;
.................... typedef unsigned int8 uint_least8_t;
.................... typedef signed int16 int_least16_t;
.................... typedef unsigned int16 uint_least16_t;
.................... typedef signed int32 int_least32_t;
.................... typedef unsigned int32 uint_least32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int_least24_t;
.................... //typedef unsigned int24 uint_least24_t;
.................... typedef signed int64 int_least64_t;
.................... typedef unsigned int64 uint_least64_t;
.................... #endif
.................... 
.................... #define INT_LEAST8_MAX  (127)
.................... #define INT_LEAST8_MIN  (-128)
.................... #define UINT_LEAST8_MAX (255)
.................... 
.................... #define INT_LEAST16_MAX  (32767)
.................... #define INT_LEAST16_MIN  (-32768)
.................... #define UINT_LEAST16_MAX (65535)
.................... 
.................... #define INT_LEAST32_MAX  (2147483647)
.................... #define INT_LEAST32_MIN  (-2147483648)
.................... #define UINT_LEAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_LEAST24_MAX  (8388607)
.................... //#define INT_LEAST24_MIN  (-8388608)
.................... //#define UINT_LEAST24_MAX (16777215)
.................... 
.................... #define INT_LEAST64_MAX  (9223372036854775807)
.................... #define INT_LEAST64_MIN  (-9223372036854775808)
.................... #define UINT_LEAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// fastest width
.................... 
.................... #if defined(__PCD__)
.................... typedef signed int16 int_fast8_t;
.................... typedef unsigned int16 uint_fast8_t;
.................... #define INT_FAST8_MAX  (32767)
.................... #define INT_FAST8_MIN  (-32768)
.................... #define UINT_FAST8_MAX (65535)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... //typedef signed int24 int_fast24_t;
.................... //typedef unsigned int24 uint_fast24_t;
.................... typedef signed int64 int_fast64_t;
.................... typedef unsigned int64 uint_fast64_t;
.................... #else
.................... typedef signed int8 int_fast8_t;
.................... typedef unsigned int8 uint_fast8_t;
.................... #define INT_FAST8_MAX  (127)
.................... #define INT_FAST8_MIN  (-128)
.................... #define UINT_FAST8_MAX (255)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... #endif
.................... 
.................... typedef signed int32 int_fast32_t;
.................... typedef unsigned int32 uint_fast32_t;
.................... 
.................... #define INT_FAST16_MAX  (32767)
.................... #define INT_FAST16_MIN  (-32768)
.................... #define UINT_FAST16_MAX (65535)
.................... 
.................... #define INT_FAST32_MAX  (2147483647)
.................... #define INT_FAST32_MIN  (-2147483648)
.................... #define UINT_FAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_FAST24_MAX  (8388607)
.................... //#define INT_FAST24_MIN  (-8388608)
.................... //#define UINT_FAST24_MAX (16777215)
.................... 
.................... #define INT_FAST64_MAX  (9223372036854775807)
.................... #define INT_FAST64_MIN  (-9223372036854775808)
.................... #define UINT_FAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... //////////// big enough to hold pointers (OPTIONAL)
.................... 
.................... #if defined(__PCD__)
....................    typedef unsigned int32 uintptr_t;
....................    typedef signed int32 intptr_t;
.................... #else
....................    typedef unsigned int16 uintptr_t;
....................    typedef signed int16 intptr_t;
.................... #endif
.................... 
.................... #define INT8_C(val) ((int8_t)val)
.................... #define UINT8_C(val) ((uint8_t)val)
.................... #define INT16_C(val) ((int16_t)val)
.................... #define UINT16_C(val) ((uint16_t)val)
.................... #define INT32_C(val) ((int32_t)val)
.................... #define UINT32_C(val) ((uint32_t)val)
.................... 
.................... #if defined(__PCD__)
.................... #define INT64_C(val) ((int64_t)val)
.................... #define UINT64_C(val) ((uint64_t)val)
.................... #endif
.................... 
.................... /// TODO:
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX
.................... 
.................... 
.................... /////////// greatest width (OPTIONAL)
.................... 
.................... #ifdef __PCD__
....................    typedef signed int64 intmax_t;
....................    typedef unsigned int64 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (9223372036854775807)
....................    #define INTMAXN_MIN  (-9223372036854775808)
....................    #define UINTMAXN_MAX (18446744073709551615)
....................    
....................    #define INTMAX_C(value) ((signed int64)val)
....................    #define UINTMAX_C(value) ((unsigned int64)val)
.................... #else
....................    typedef signed int32 intmax_t;
....................    typedef unsigned int32 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (2147483647)
....................    #define INTMAXN_MIN  (-2147483648)
....................    #define UINTMAXN_MAX (4294967295)
....................    
....................    #define INTMAX_C(value) ((signed int32)val)
....................    #define UINTMAX_C(value) ((unsigned int32)val)
.................... #endif
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #device ADC=10
.................... 
.................... #FUSES NOWDT                    //No Watch Dog Timer
.................... 
.................... #use delay(crystal=20000000)
*
0018A:  CLRF   FEA
0018C:  MOVLW  77
0018E:  MOVWF  FE9
00190:  MOVF   FEF,W
00192:  BZ    01AE
00194:  MOVLW  06
00196:  MOVWF  01
00198:  CLRF   00
0019A:  DECFSZ 00,F
0019C:  BRA    019A
0019E:  DECFSZ 01,F
001A0:  BRA    0198
001A2:  MOVLW  7B
001A4:  MOVWF  00
001A6:  DECFSZ 00,F
001A8:  BRA    01A6
001AA:  DECFSZ FEF,F
001AC:  BRA    0194
001AE:  RETURN 0
.................... 
.................... 
.................... 
.................... #include <TV_PICKIT2_SHIFT_1.c>
.................... #ifndef    __TV_PICKIT2_SHIFT_1_C__
.................... #define    __TV_PICKIT2_SHIFT_1_C__
.................... #include<TV_PICKIT2_SHIFT_1.h>
.................... #ifndef    __TV_PICKIT2_SHIFT_1_H__
.................... #define    __TV_PICKIT2_SHIFT_1_H__
.................... 
.................... //#include    <18f6722.h>
.................... //#device     adc =10
.................... //#fuses      hs,PUT, NOWDT
.................... //#use        delay(clock=20M)
.................... //#use        i2c(I2C1)
.................... 
.................... 
.................... 
.................... #include    <math.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float32)(unsigned int16)y;
.................... 
....................  else if (y < 10000000.0)
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
....................       res = 32768.0*(float32)l;
....................       res += (float32)(unsigned int16)y;
....................    }
.................... 
....................  else
....................   res = y;
.................... 
....................  y = y - (float32)(unsigned int16)y;
.................... 
....................  if (s)
....................   res = -res;
.................... 
....................  if (y != 0)
....................  {
....................   if (s == 1 && n == 0)
....................    res -= 1.0;
.................... 
....................   if (s == 0 && n == 1)
....................    res += 1.0;
....................  }
....................  if (x == 0)
....................     res = 0;
.................... 
....................  return (res);
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl[0]*y2 + pl[1];
.................... 
....................       r = ql[0]*y2 + ql[1];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
....................          r = -(float32)-n;
....................       else
....................          r = (float32)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 4; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 8; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p_64[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... #define  soft_i2c_sda   pin_c4
.................... #define  soft_i2c_scl   pin_c3
.................... #DEFINE  BT0     PIN_b4
.................... #DEFINE  BT1     PIN_b5
.................... #DEFINE  BT2     PIN_b6
.................... #DEFINE  BT3     PIN_b7
.................... #DEFINE  ON      BT0 
.................... #DEFINE  UP      BT0  
.................... #DEFINE  ON1     BT0 
.................... #DEFINE  OFF     BT1
.................... #DEFINE  DW      BT1
.................... #DEFINE  OFF1    BT1
.................... #DEFINE  INV     BT2
.................... #DEFINE  ON2     BT2
.................... #DEFINE  CLR     BT2
.................... #DEFINE  MOD     BT3
.................... #DEFINE  STOP    BT3    
.................... #DEFINE  OFF2    BT3
.................... typedef enum 
.................... {
....................       OK  = 0,
....................       ERR = 1
.................... }result;
.................... CONST UNSIGNED CHAR MA7DOAN[16]= {0XC0,0XF9,0xA4,0XB0,0X99,0X92,0X82,0XF8,
.................... 0X80,0X90,0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8E};  
.................... unsigned int8 LED_7DQ[8]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
.................... void xuat_32led_don_4byte(int8 b3,int8 b2,int8 b1,int8 b0);
.................... void xuat_32led_don_2word(int16 w1,int16 w0);
.................... void xuat_32led_don_1dw(int32 dwl);
.................... int1 inputcd (int16 pin);
.................... void xuat_4led_7doan_4so(int8 b3,int8 b2,int8 b1,int8 b0);
.................... void xuat_4led_7doan_giaima_xoa_so0(unsigned int16 tam);
.................... void xuat_8led_7doan_2byte(int8 data,int8 maquet);
.................... void hien_thi_8led_7doan_quet_all();
.................... void set_up_port_ic_chot();
.................... 
.................... #endif
.................... 
.................... void buzzer_on()
.................... {
....................       output_high(pin_f7);
.................... }
.................... void buzzer_off()
.................... {
....................       output_low(pin_f7);
*
00214:  BCF    F97.7
00216:  BCF    F8E.7
00218:  GOTO   025A (RETURN)
.................... }
.................... void xuat_32led_don_4byte(int8 b3,int8 b2,int8 b1,int8 b0)
.................... {
....................       spi_write2(b3);spi_write2(b2);
....................       spi_write2(b1);spi_write2(b0);
....................       output_high(pin_d5); output_low(pin_d5);
.................... }
.................... void xuat_32led_don_2word(int16 w1,int16 w0)
.................... {
....................       spi_write2(w1>>8);spi_write2(w1);
*
003EC:  MOVFF  73,77
003F0:  CLRF   x78
003F2:  MOVF   F66,W
003F4:  MOVFF  73,F66
003F8:  RRCF   F64,W
003FA:  BNC   03F8
003FC:  MOVF   F66,W
003FE:  MOVFF  72,F66
00402:  RRCF   F64,W
00404:  BNC   0402
....................       spi_write2(w0>>8);spi_write2(w0);
00406:  MOVFF  75,77
0040A:  CLRF   x78
0040C:  MOVF   F66,W
0040E:  MOVFF  75,F66
00412:  RRCF   F64,W
00414:  BNC   0412
00416:  MOVF   F66,W
00418:  MOVFF  74,F66
0041C:  RRCF   F64,W
0041E:  BNC   041C
....................       output_high(pin_d5); output_low(pin_d5);
00420:  BCF    F95.5
00422:  BSF    F8C.5
00424:  BCF    F95.5
00426:  BCF    F8C.5
00428:  RETURN 0
.................... }
.................... void  xuat_32led_don_1dw(int32 dwl)
.................... {
....................       spi_write2(dwl>>24);spi_write2(dwl>>16);
*
00134:  MOVFF  75,77
00138:  CLRF   x78
0013A:  CLRF   x79
0013C:  CLRF   x7A
0013E:  MOVF   F66,W
00140:  MOVFF  75,F66
00144:  RRCF   F64,W
00146:  BNC   0144
00148:  MOVFF  74,77
0014C:  MOVFF  75,78
00150:  CLRF   x79
00152:  CLRF   x7A
00154:  MOVF   F66,W
00156:  MOVFF  74,F66
0015A:  RRCF   F64,W
0015C:  BNC   015A
....................       spi_write2(dwl>>8);spi_write2(dwl);
0015E:  MOVFF  73,77
00162:  MOVFF  74,78
00166:  MOVFF  75,79
0016A:  CLRF   x7A
0016C:  MOVF   F66,W
0016E:  MOVFF  73,F66
00172:  RRCF   F64,W
00174:  BNC   0172
00176:  MOVF   F66,W
00178:  MOVFF  72,F66
0017C:  RRCF   F64,W
0017E:  BNC   017C
....................       output_high(pin_d5); output_low(pin_d5);
00180:  BCF    F95.5
00182:  BSF    F8C.5
00184:  BCF    F95.5
00186:  BCF    F8C.5
00188:  RETURN 0
.................... }
.................... 
.................... int1 inputcd(int16 pin)
.................... {
....................       int8 n;
....................       static int16 oldpin=0xffff;
....................       static int1 tt=0;
....................       static int1 dem=0;
....................       if((input(pin)==0)&&(dem==0))
*
0031C:  MOVFF  70,73
00320:  MOVLW  01
00322:  MOVWF  x74
00324:  MOVLW  0F
00326:  MOVWF  x76
00328:  MOVLW  92
0032A:  MOVWF  x75
0032C:  RCALL  02AC
0032E:  MOVFF  70,73
00332:  MOVLW  0F
00334:  MOVWF  x75
00336:  MOVLW  80
00338:  MOVWF  x74
0033A:  RCALL  02EA
0033C:  BTFSC  01.0
0033E:  BRA    0376
00340:  BTFSC  25.1
00342:  BRA    0376
....................        {
....................          if(tt==0) {oldpin = pin;tt=1;}
00344:  BTFSC  25.0
00346:  BRA    0352
00348:  MOVFF  71,24
0034C:  MOVFF  70,23
00350:  BSF    25.0
....................          if(pin==oldpin) 
00352:  MOVF   23,W
00354:  SUBWF  x70,W
00356:  BNZ   0374
00358:  MOVF   24,W
0035A:  SUBWF  x71,W
0035C:  BNZ   0374
....................           {
....................            for(n=0;n<5;n++)hien_thi_8led_7doan_quet_all();
0035E:  CLRF   x72
00360:  MOVF   x72,W
00362:  SUBLW  04
00364:  BNC   036C
00366:  RCALL  01B0
00368:  INCF   x72,F
0036A:  BRA    0360
....................            dem=1;
0036C:  BSF    25.1
....................            return 0;
0036E:  MOVLW  00
00370:  MOVWF  01
00372:  BRA    03E8
....................           }
....................       }
00374:  BRA    03E4
....................       else if(input(pin)&&dem)
00376:  MOVFF  70,73
0037A:  MOVLW  01
0037C:  MOVWF  x74
0037E:  MOVLW  0F
00380:  MOVWF  x76
00382:  MOVLW  92
00384:  MOVWF  x75
00386:  RCALL  02AC
00388:  MOVFF  70,73
0038C:  MOVLW  0F
0038E:  MOVWF  x75
00390:  MOVLW  80
00392:  MOVWF  x74
00394:  RCALL  02EA
00396:  BTFSS  01.0
00398:  BRA    03E4
0039A:  BTFSS  25.1
0039C:  BRA    03E4
....................       {
....................           if(pin==oldpin)
0039E:  MOVF   23,W
003A0:  SUBWF  x70,W
003A2:  BNZ   03E4
003A4:  MOVF   24,W
003A6:  SUBWF  x71,W
003A8:  BNZ   03E4
....................           {   
....................               for(n=0;n<5;n++)hien_thi_8led_7doan_quet_all();
003AA:  CLRF   x72
003AC:  MOVF   x72,W
003AE:  SUBLW  04
003B0:  BNC   03B8
003B2:  RCALL  01B0
003B4:  INCF   x72,F
003B6:  BRA    03AC
....................               if(input(pin))
003B8:  MOVFF  70,73
003BC:  MOVLW  01
003BE:  MOVWF  x74
003C0:  MOVLW  0F
003C2:  MOVWF  x76
003C4:  MOVLW  92
003C6:  MOVWF  x75
003C8:  RCALL  02AC
003CA:  MOVFF  70,73
003CE:  MOVLW  0F
003D0:  MOVWF  x75
003D2:  MOVLW  80
003D4:  MOVWF  x74
003D6:  RCALL  02EA
003D8:  BTFSS  01.0
003DA:  BRA    03E4
....................               {
....................                  tt=0; 
003DC:  BCF    25.0
....................                  dem=0;
003DE:  BCF    25.1
....................                  oldpin=0xffff;
003E0:  SETF   24
003E2:  SETF   23
....................               }
....................           }
....................       }
....................       return 1; 
003E4:  MOVLW  01
003E6:  MOVWF  01
003E8:  GOTO   0ADA (RETURN)
.................... }
.................... 
.................... void xuat_4led_7doan_4so(int8 b3,int8 b2,int8 b1,int8 b0)
.................... {
....................       spi_write2(b0);spi_write2(b1);
*
00102:  MOVF   F66,W
00104:  MOVFF  76,F66
00108:  RRCF   F64,W
0010A:  BNC   0108
0010C:  MOVF   F66,W
0010E:  MOVFF  75,F66
00112:  RRCF   F64,W
00114:  BNC   0112
....................       spi_write2(b2);spi_write2(b3);
00116:  MOVF   F66,W
00118:  MOVFF  74,F66
0011C:  RRCF   F64,W
0011E:  BNC   011C
00120:  MOVF   F66,W
00122:  MOVFF  73,F66
00126:  RRCF   F64,W
00128:  BNC   0126
....................       output_high(pin_d7); output_low(pin_d7);
0012A:  BCF    F95.7
0012C:  BSF    F8C.7
0012E:  BCF    F95.7
00130:  BCF    F8C.7
00132:  RETURN 0
.................... }
.................... 
.................... void xuat_4led_7doan_giaima_xoa_so0(unsigned int16 tam)
.................... {
....................       unsigned int8 ht[4]={0xff,0xff,0xff,0xff},i=0;
....................       do
....................       {
....................           ht[i]= ma7doan[tam%10];
....................           tam/=10;i++;
....................       }
....................       while(tam);
....................       xuat_4led_7doan_4so(ht[3],ht[2],ht[1],ht[0]);
.................... }
.................... 
.................... void hien_thi_8led_7doan_quet_all()
.................... {
....................       unsigned int8 n;
....................       for(n=0;n<8;n++)
*
001B0:  CLRF   x76
001B2:  MOVF   x76,W
001B4:  SUBLW  07
001B6:  BNC   0212
....................       {       
....................             spi_write2(0x01<<n);
001B8:  MOVLW  01
001BA:  MOVWF  x77
001BC:  MOVF   x76,W
001BE:  MOVWF  01
001C0:  BZ    01CA
001C2:  BCF    FD8.0
001C4:  RLCF   x77,F
001C6:  DECFSZ 01,F
001C8:  BRA    01C2
001CA:  MOVF   F66,W
001CC:  MOVFF  77,F66
001D0:  RRCF   F64,W
001D2:  BNC   01D0
....................             spi_write2(LED_7DQ[n]);
001D4:  CLRF   03
001D6:  MOVF   x76,W
001D8:  ADDLW  1B
001DA:  MOVWF  FE9
001DC:  MOVLW  00
001DE:  ADDWFC 03,W
001E0:  MOVWF  FEA
001E2:  MOVFF  FEF,77
001E6:  MOVF   F66,W
001E8:  MOVFF  77,F66
001EC:  RRCF   F64,W
001EE:  BNC   01EC
....................             output_high(pin_d1); output_low(pin_d1);
001F0:  BCF    F95.1
001F2:  BSF    F8C.1
001F4:  BCF    F95.1
001F6:  BCF    F8C.1
....................             delay_ms(1);
001F8:  MOVLW  01
001FA:  MOVWF  x77
001FC:  RCALL  018A
....................             spi_write2(0xff);
001FE:  MOVF   F66,W
00200:  SETF   F66
00202:  RRCF   F64,W
00204:  BNC   0202
....................             output_high(pin_d1); output_low(pin_d1);
00206:  BCF    F95.1
00208:  BSF    F8C.1
0020A:  BCF    F95.1
0020C:  BCF    F8C.1
0020E:  INCF   x76,F
00210:  BRA    01B2
....................       }
00212:  RETURN 0
.................... }
.................... void triac_2_on()
.................... {
....................       output_high(Pin_f6);
.................... }
.................... void triac_2_off()
.................... {
....................       output_low(Pin_f6);
*
0021C:  BCF    F97.6
0021E:  BCF    F8E.6
00220:  GOTO   025C (RETURN)
.................... }
.................... void set_up_port_ic_chot()
.................... {
....................       set_tris_a(0xff);
00224:  MOVLW  FF
00226:  MOVWF  F92
....................       set_tris_d(0x04);
00228:  MOVLW  04
0022A:  MOVWF  F95
....................       set_tris_e(0);
0022C:  MOVLW  00
0022E:  MOVWF  F96
....................       set_tris_f(0);
00230:  MOVWF  F97
....................       set_tris_g(0);
00232:  MOVWF  F98
....................       port_b_pullups(0xFF);
00234:  BCF    FF1.7
....................       output_g(0);
00236:  CLRF   F98
00238:  CLRF   F8F
....................       xuat_4led_7doan_4so(0xff,0xff,0xff,0xff);   // tat 4 led 7 doan
0023A:  SETF   x73
0023C:  SETF   x74
0023E:  SETF   x75
00240:  SETF   x76
00242:  RCALL  0102
....................       xuat_32led_don_1dw(0);                      // tat led don
00244:  CLRF   x75
00246:  CLRF   x74
00248:  CLRF   x73
0024A:  CLRF   x72
0024C:  RCALL  0134
....................       output_high(pin_g0);
0024E:  BCF    F98.0
00250:  BSF    F8F.0
....................       set_tris_c(0xff);
00252:  MOVLW  FF
00254:  MOVWF  F94
....................       hien_thi_8led_7doan_quet_all();
00256:  RCALL  01B0
....................       buzzer_off(); 
00258:  BRA    0214
....................       triac_2_off();
0025A:  BRA    021C
.................... #ifdef   __TV_PICKIT2_SHIFT_LCD_H__
0025C:  GOTO   0A9A (RETURN)
....................      setup_lcd(); 
.................... #endif
.................... }
.................... //////////////////// Soft I2C ///////////////////////////
.................... void soft_i2c_clk()
.................... {   
....................     output_high(soft_i2c_scl);
....................     DELAY_us(1);  
....................     output_low(soft_i2c_scl);
.................... }
.................... void soft_i2c_start()
.................... {
....................       output_high(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       delay_us(1);
....................       output_low(soft_i2c_sda);
....................       delay_us(1);
....................       output_low(soft_i2c_scl);      
.................... }
.................... void soft_i2c_stop()
.................... {
....................       output_low(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       delay_us(1);
....................       output_high(soft_i2c_sda);
.................... }
.................... void soft_i2c_write(unsigned int8 b)
.................... {
....................       unsigned int8 m;
....................       for(m=0x80;m>0;m>>=1)
....................       {
....................             output_bit( soft_i2c_sda,b&m);
....................             soft_i2c_clk();
....................       }
....................       soft_i2c_clk();
.................... }
.................... 
.................... unsigned int8 soft_i2c_read(int1 ack)
.................... { 
....................       unsigned int8 n,nhan=0;
....................       output_float(soft_i2c_sda);
....................       for(n=0x80;n>0;n>>=1)
....................       {      
....................             output_high(soft_i2c_scl);  
....................             delay_us(1);
....................             if(input(soft_i2c_sda))nhan=nhan|n;
....................             output_low(soft_i2c_scl);   
....................       }
....................       if(ack)  output_low(soft_i2c_sda);
....................       else     output_high(soft_i2c_sda); 
....................       soft_i2c_clk();
....................       output_high(soft_i2c_sda); 
....................       return nhan;
.................... }
.................... #endif
.................... 
.................... 
.................... 
.................... #include <TV_PICKIT2_SHIFT_32LED_DON.c>
.................... unsigned int32    y=0,yp_chay=1,yt_chay=0x80000000,y_codinh=0;
.................... unsigned int16 zt,zt_chay_t=0x8000,zt_chay_p=1,zt_codinh=0;
.................... unsigned int16 zp,zp_chay_t=0x8000,zp_chay_p=1,zp_codinh=0;
.................... 
.................... unsigned int16 tgdlay=0;
.................... unsigned int8 dem_led=0; 
.................... signed i32=32,j32=0,ttct_td=1,i16=16,j16=0;
.................... 
.................... unsigned int32    za=1,ya=1,xa=0xfffffffe,zb=0x80000000,yb=0x80000000,xb=0x7fffffff;   
.................... signed ia=1,ja=1;  
.................... void reset_toan_bo_bien()
.................... { 
....................       ttct_td++;     //chuyen chuong trinh cho tu dong
*
00462:  INCF   4B,F
....................       y=0;      yp_chay=1;      yt_chay=0x80000000;      y_codinh=0;
00464:  CLRF   29
00466:  CLRF   28
00468:  CLRF   27
0046A:  CLRF   26
0046C:  CLRF   2D
0046E:  CLRF   2C
00470:  CLRF   2B
00472:  MOVLW  01
00474:  MOVWF  2A
00476:  MOVLW  80
00478:  MOVWF  31
0047A:  CLRF   30
0047C:  CLRF   2F
0047E:  CLRF   2E
00480:  CLRF   35
00482:  CLRF   34
00484:  CLRF   33
00486:  CLRF   32
....................       zt_chay_t=0x8000;    zt_chay_p=1;   zt_codinh=0;
00488:  MOVWF  39
0048A:  CLRF   38
0048C:  CLRF   3B
0048E:  MOVLW  01
00490:  MOVWF  3A
00492:  CLRF   3D
00494:  CLRF   3C
....................       zp_chay_t=0x8000;    zp_chay_p=1;   zp_codinh=0;
00496:  MOVLW  80
00498:  MOVWF  41
0049A:  CLRF   40
0049C:  CLRF   43
0049E:  MOVLW  01
004A0:  MOVWF  42
004A2:  CLRF   45
004A4:  CLRF   44
....................       zt=zp=0;
004A6:  CLRF   3F
004A8:  CLRF   3E
004AA:  MOVFF  3F,37
004AE:  MOVFF  3E,36
....................       i32=32;j32=0;i16=16,j16=0;
004B2:  MOVLW  20
004B4:  MOVWF  49
004B6:  CLRF   4A
004B8:  MOVLW  10
004BA:  MOVWF  4C
004BC:  CLRF   4D
....................       dem_led=0;
004BE:  CLRF   48
....................       
....................       za=1;    ya=1;    xa=0xfffffffe;     ia=1;    ja=1;
004C0:  CLRF   51
004C2:  CLRF   50
004C4:  CLRF   4F
004C6:  MOVLW  01
004C8:  MOVWF  4E
004CA:  CLRF   55
004CC:  CLRF   54
004CE:  CLRF   53
004D0:  MOVWF  52
004D2:  SETF   59
004D4:  SETF   58
004D6:  SETF   57
004D8:  MOVLW  FE
004DA:  MOVWF  56
004DC:  MOVLW  01
004DE:  MOVWF  x66
004E0:  MOVWF  x67
....................      zb=0x80000000;    yb=0x80000000;    xb=0x7fffffff;
004E2:  MOVLW  80
004E4:  MOVWF  5D
004E6:  CLRF   5C
004E8:  CLRF   5B
004EA:  CLRF   5A
004EC:  MOVWF  x61
004EE:  CLRF   x60
004F0:  CLRF   5F
004F2:  CLRF   5E
004F4:  MOVLW  7F
004F6:  MOVWF  x65
004F8:  SETF   x64
004FA:  SETF   x63
004FC:  SETF   x62
004FE:  RETURN 0
.................... } 
.................... 
.................... void tang_dem_led_delay_1(unsigned int8 dl)
.................... { 
....................       unsigned int8 i;
....................       for (i=0; i<dl;i++)
*
0043A:  CLRF   x75
0043C:  MOVF   x74,W
0043E:  SUBWF  x75,W
00440:  BC    0448
....................       hien_thi_8led_7doan_quet_all();
00442:  RCALL  01B0
00444:  INCF   x75,F
00446:  BRA    043C
....................       dem_led++;
00448:  INCF   48,F
0044A:  GOTO   0460 (RETURN)
.................... } 
.................... 
.................... void tang_dem_led_delay_0(unsigned int8 dl)
.................... { 
....................       if (dl>0)      delay_ms(dl); 
*
0042A:  MOVF   x74,F
0042C:  BZ    0434
0042E:  MOVFF  74,77
00432:  RCALL  018A
....................       dem_led++;
00434:  INCF   48,F
00436:  GOTO   0460 (RETURN)
.................... } 
.................... 
.................... void delay_chon(unsigned int8 dl,chondelay)
.................... {    
....................    if (!chondelay)   tang_dem_led_delay_0(dl);
*
0044E:  MOVF   x73,F
00450:  BNZ   045A
00452:  MOVFF  72,74
00456:  BRA    042A
00458:  BRA    0460
....................    else              tang_dem_led_delay_1(dl);
0045A:  MOVFF  72,74
0045E:  BRA    043A
00460:  RETURN 0
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //32 led: sang don  phai sang trai
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void diem_sang_dich_trai_mat_dan_32led(unsigned int8 dl,chondelay)
.................... {       
....................    if(ia<33)
....................    {
....................       if(ja>0)
....................       {
....................          zb = (zb << 1);
....................          y = xb|zb;        
....................          xuat_32led_don_1dw(y);
....................          delay_chon(dl,chondelay);
....................          ja--;
....................       }
....................       else 
....................       {
....................          ia++;
....................          ja=ia;      
....................          yb = yb>>1;
....................          xb = xb>>1;
....................          zb = yb;
....................       }
....................    }
....................    else reset_toan_bo_bien();
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //32 led: sang don  trai sang phai
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void diem_sang_dich_phai_mat_dan_32led(unsigned int8 dl,chondelay)
.................... {       
....................    if(ia<33)
....................    {
....................       if(ja>0)
....................       {
....................          za = (za >> 1);
....................          y = xa|za;        
....................          xuat_32led_don_1dw(y);
....................          delay_chon(dl,chondelay);
....................          ja--;
....................       }
....................       else 
....................       {
....................          ia++;
....................          ja=ia;      
....................          ya = ya<<1;
....................          xa = xa <<1;
....................          za = ya;
....................       }
....................    }
....................    else reset_toan_bo_bien();
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //32 led: chop tat 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void dao_dl_32bit_va_xuat()
.................... {
....................    y=~y;
....................    xuat_32led_don_1dw(y); 
.................... }
.................... void sang_tat_32led(unsigned int8 dl,chondelay)
.................... {        
....................       if (tgdlay==1)          xuat_32led_don_1dw(y); 
....................       else if (tgdlay==50)    dao_dl_32bit_va_xuat();
....................       else if (tgdlay==100)   dao_dl_32bit_va_xuat();          
....................       else if (tgdlay==150)   dao_dl_32bit_va_xuat();                 
....................       else if (tgdlay==200)  
....................       {
....................          ttct_td++;   y=0;        tgdlay=0;
....................       }
....................       tgdlay++;
....................       delay_chon(dl,chondelay);
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //32 led: sang dan roi tat dan tu ngoai vao
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void sang_tat_dan_ngoai_vao_32led(unsigned int8 dl,chondelay)
.................... {  
....................    if (dem_led<16)
....................    {  
....................       xuat_32led_don_2word(zp,zt);        
....................       zp= (zp<<1)+1; 
....................       zt= (zt>>1)+0x8000;
....................       delay_chon(dl,chondelay);
....................    }
....................    else  if (dem_led<32)
....................    {  
....................       xuat_32led_don_2word(zp,zt);
....................       zp= (zp<<1); 
....................       zt= (zt>>1);
....................       delay_chon(dl,chondelay);
....................    }
....................    else reset_toan_bo_bien();
.................... 
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //32 led: sang dan roi tat dan tu trong ra
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void sang_tat_dan_trong_ra_32led(unsigned int8 dl,chondelay)
.................... {  
....................    if (dem_led<16)
....................    {   
....................       xuat_32led_don_2word(zp,zt); 
....................       zp= (zp>>1)+0x8000; 
....................       zt= (zt<<1)+1;
....................       delay_chon(dl,chondelay);
....................    }
....................    else  if (dem_led<32)
....................    {  
....................       xuat_32led_don_2word(zp,zt);
....................       zp= (zp>>1); 
....................       zt= (zt<<1);
....................       delay_chon(dl,chondelay);
....................     }
....................    else reset_toan_bo_bien();
....................         
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu phai sang trai
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void sang_tat_dan_phai_sang_trai_2x16led(unsigned int8 dl,chondelay)
.................... {  
....................    if (dem_led<16)
*
00950:  MOVF   48,W
00952:  SUBLW  0F
00954:  BNC   0984
....................    {   
....................       xuat_32led_don_2word(zp,zp);
00956:  MOVFF  3F,73
0095A:  MOVFF  3E,72
0095E:  MOVFF  3F,75
00962:  MOVFF  3E,74
00966:  RCALL  03EC
....................       zp= (zp>>1)+0x8000;
00968:  BCF    FD8.0
0096A:  RRCF   3F,W
0096C:  MOVWF  x73
0096E:  RRCF   3E,W
00970:  MOVWF  3E
00972:  MOVLW  80
00974:  ADDWF  x73,W
00976:  MOVWF  3F
....................       delay_chon(dl,chondelay);
00978:  MOVFF  70,72
0097C:  MOVFF  71,73
00980:  RCALL  044E
....................    }
00982:  BRA    09B0
....................    else  if (dem_led<32)
00984:  MOVF   48,W
00986:  SUBLW  1F
00988:  BNC   09AE
....................    {  
....................       xuat_32led_don_2word(zp,zp);
0098A:  MOVFF  3F,73
0098E:  MOVFF  3E,72
00992:  MOVFF  3F,75
00996:  MOVFF  3E,74
0099A:  RCALL  03EC
....................       zp= (zp>>1);
0099C:  BCF    FD8.0
0099E:  RRCF   3F,F
009A0:  RRCF   3E,F
....................       delay_chon(dl,chondelay);
009A2:  MOVFF  70,72
009A6:  MOVFF  71,73
009AA:  RCALL  044E
....................     }
009AC:  BRA    09B0
....................    else reset_toan_bo_bien();
009AE:  RCALL  0462
009B0:  GOTO   0BB4 (RETURN)
....................       
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //32 led: 2nhom 16 led sang dan roi tat dan tu trai sang phai
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void sang_tat_dan_trai_sang_phai_2x16led(unsigned int8 dl,chondelay)
.................... {  
....................    if (dem_led<16)
*
008E6:  MOVF   48,W
008E8:  SUBLW  0F
008EA:  BNC   0920
....................    {   
....................       xuat_32led_don_2word(zt,zt);  
008EC:  MOVFF  37,73
008F0:  MOVFF  36,72
008F4:  MOVFF  37,75
008F8:  MOVFF  36,74
008FC:  RCALL  03EC
....................       zt= (zt<<1)+1;
008FE:  BCF    FD8.0
00900:  RLCF   36,W
00902:  MOVWF  x72
00904:  RLCF   37,W
00906:  MOVWF  x73
00908:  MOVLW  01
0090A:  ADDWF  x72,W
0090C:  MOVWF  36
0090E:  MOVLW  00
00910:  ADDWFC x73,W
00912:  MOVWF  37
....................       delay_chon(dl,chondelay);
00914:  MOVFF  70,72
00918:  MOVFF  71,73
0091C:  RCALL  044E
....................    }
0091E:  BRA    094C
....................    else  if (dem_led<32)
00920:  MOVF   48,W
00922:  SUBLW  1F
00924:  BNC   094A
....................    {  
....................       xuat_32led_don_2word(zt,zt);
00926:  MOVFF  37,73
0092A:  MOVFF  36,72
0092E:  MOVFF  37,75
00932:  MOVFF  36,74
00936:  RCALL  03EC
....................       zt= (zt<<1);
00938:  BCF    FD8.0
0093A:  RLCF   36,F
0093C:  RLCF   37,F
....................       delay_chon(dl,chondelay);
0093E:  MOVFF  70,72
00942:  MOVFF  71,73
00946:  RCALL  044E
....................     }
00948:  BRA    094C
....................    else reset_toan_bo_bien();
0094A:  RCALL  0462
0094C:  GOTO   0BA4 (RETURN)
....................         
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //32 led: sang dan roi tat dan tu phai sang trai
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void sang_tat_dan_pst_32led(unsigned int8 dl,chondelay)
.................... {        
....................    if (dem_led<32)
*
00864:  MOVF   48,W
00866:  SUBLW  1F
00868:  BNC   08B2
....................    {  
....................       xuat_32led_don_1dw(y);
0086A:  MOVFF  29,75
0086E:  MOVFF  28,74
00872:  MOVFF  27,73
00876:  MOVFF  26,72
0087A:  RCALL  0134
....................       y= (y<<1)+1;
0087C:  BCF    FD8.0
0087E:  RLCF   26,W
00880:  MOVWF  x73
00882:  RLCF   27,W
00884:  MOVWF  x74
00886:  RLCF   28,W
00888:  MOVWF  x75
0088A:  RLCF   29,W
0088C:  MOVWF  x76
0088E:  MOVLW  01
00890:  ADDWF  x73,W
00892:  MOVWF  26
00894:  MOVLW  00
00896:  ADDWFC x74,W
00898:  MOVWF  27
0089A:  MOVLW  00
0089C:  ADDWFC x75,W
0089E:  MOVWF  28
008A0:  MOVLW  00
008A2:  ADDWFC x76,W
008A4:  MOVWF  29
....................       delay_chon(dl,chondelay);
008A6:  MOVFF  70,72
008AA:  MOVFF  71,73
008AE:  RCALL  044E
....................    }
008B0:  BRA    08E2
....................    else  if (dem_led<64)
008B2:  MOVF   48,W
008B4:  SUBLW  3F
008B6:  BNC   08E0
....................    {  
....................       xuat_32led_don_1dw(y);   
008B8:  MOVFF  29,75
008BC:  MOVFF  28,74
008C0:  MOVFF  27,73
008C4:  MOVFF  26,72
008C8:  RCALL  0134
....................       y= (y<<1); 
008CA:  BCF    FD8.0
008CC:  RLCF   26,F
008CE:  RLCF   27,F
008D0:  RLCF   28,F
008D2:  RLCF   29,F
....................       delay_chon(dl,chondelay);
008D4:  MOVFF  70,72
008D8:  MOVFF  71,73
008DC:  RCALL  044E
....................    } 
008DE:  BRA    08E2
....................    else reset_toan_bo_bien();
008E0:  RCALL  0462
008E2:  GOTO   0B94 (RETURN)
.................... 
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //32 led: sang dan roi tat dan tu trai sang phai
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void sang_tat_dan_tsp_32led(unsigned int8 dl,chondelay)
.................... {           
....................       if (dem_led<32)
*
007EC:  MOVF   48,W
007EE:  SUBLW  1F
007F0:  BNC   0830
....................       {  
....................          xuat_32led_don_1dw(y);
007F2:  MOVFF  29,75
007F6:  MOVFF  28,74
007FA:  MOVFF  27,73
007FE:  MOVFF  26,72
00802:  RCALL  0134
....................          y= (y>>1)+0x80000000; 
00804:  BCF    FD8.0
00806:  RRCF   29,W
00808:  MOVWF  x76
0080A:  RRCF   28,W
0080C:  MOVWF  x75
0080E:  RRCF   27,W
00810:  MOVWF  x74
00812:  RRCF   26,W
00814:  MOVWF  26
00816:  MOVFF  74,27
0081A:  MOVFF  75,28
0081E:  MOVLW  80
00820:  ADDWF  x76,W
00822:  MOVWF  29
....................          delay_chon(dl,chondelay);      
00824:  MOVFF  70,72
00828:  MOVFF  71,73
0082C:  RCALL  044E
....................       }
0082E:  BRA    0860
....................       else
....................       if (dem_led<64)
00830:  MOVF   48,W
00832:  SUBLW  3F
00834:  BNC   085E
....................       {  
....................          xuat_32led_don_1dw(y); 
00836:  MOVFF  29,75
0083A:  MOVFF  28,74
0083E:  MOVFF  27,73
00842:  MOVFF  26,72
00846:  RCALL  0134
....................          y= (y>>1);
00848:  BCF    FD8.0
0084A:  RRCF   29,F
0084C:  RRCF   28,F
0084E:  RRCF   27,F
00850:  RRCF   26,F
....................          delay_chon(dl,chondelay);
00852:  MOVFF  70,72
00856:  MOVFF  71,73
0085A:  RCALL  044E
....................       } 
0085C:  BRA    0860
....................       else reset_toan_bo_bien();
0085E:  RCALL  0462
00860:  GOTO   0B84 (RETURN)
....................     
.................... }         
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //32 led: diem sang di chueyn tu phai sang trai
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx OK
.................... void diem_sang_di_chuyen_pst_32led(unsigned int8 dl,chondelay)
.................... {        
....................    if (dem_led==0)
*
00782:  MOVF   48,F
00784:  BNZ   07B8
....................    {  
....................       y=1;
00786:  CLRF   29
00788:  CLRF   28
0078A:  CLRF   27
0078C:  MOVLW  01
0078E:  MOVWF  26
....................       xuat_32led_don_1dw(y);
00790:  MOVFF  29,75
00794:  MOVFF  28,74
00798:  MOVFF  27,73
0079C:  MOVFF  26,72
007A0:  RCALL  0134
....................       y= (y<<1);
007A2:  BCF    FD8.0
007A4:  RLCF   26,F
007A6:  RLCF   27,F
007A8:  RLCF   28,F
007AA:  RLCF   29,F
....................       delay_chon(dl,chondelay);
007AC:  MOVFF  70,72
007B0:  MOVFF  71,73
007B4:  RCALL  044E
....................    }
007B6:  BRA    07E8
....................    else  if (dem_led<33)
007B8:  MOVF   48,W
007BA:  SUBLW  20
007BC:  BNC   07E6
....................    {  
....................       xuat_32led_don_1dw(y);   
007BE:  MOVFF  29,75
007C2:  MOVFF  28,74
007C6:  MOVFF  27,73
007CA:  MOVFF  26,72
007CE:  RCALL  0134
....................       y= (y<<1); 
007D0:  BCF    FD8.0
007D2:  RLCF   26,F
007D4:  RLCF   27,F
007D6:  RLCF   28,F
007D8:  RLCF   29,F
....................       delay_chon(dl,chondelay);
007DA:  MOVFF  70,72
007DE:  MOVFF  71,73
007E2:  RCALL  044E
....................    } 
007E4:  BRA    07E8
....................    else  reset_toan_bo_bien();
007E6:  RCALL  0462
007E8:  GOTO   0B74 (RETURN)
.................... }    
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //32 led: diem sang di chueyn tu trai sang phai
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx OK
.................... void diem_sang_di_chuyen_tsp_32led(unsigned int8 dl,chondelay)
.................... {        
....................    if (dem_led==0)
*
00718:  MOVF   48,F
0071A:  BNZ   074E
....................    {  
....................       y=0x80000000;
0071C:  MOVLW  80
0071E:  MOVWF  29
00720:  CLRF   28
00722:  CLRF   27
00724:  CLRF   26
....................       xuat_32led_don_1dw(y);
00726:  MOVFF  29,75
0072A:  MOVFF  28,74
0072E:  MOVFF  27,73
00732:  MOVFF  26,72
00736:  RCALL  0134
....................       y= (y>>1);
00738:  BCF    FD8.0
0073A:  RRCF   29,F
0073C:  RRCF   28,F
0073E:  RRCF   27,F
00740:  RRCF   26,F
....................       delay_chon(dl,chondelay);
00742:  MOVFF  70,72
00746:  MOVFF  71,73
0074A:  RCALL  044E
....................    }
0074C:  BRA    077E
....................    else  if (dem_led<33)
0074E:  MOVF   48,W
00750:  SUBLW  20
00752:  BNC   077C
....................    {  
....................       xuat_32led_don_1dw(y);   
00754:  MOVFF  29,75
00758:  MOVFF  28,74
0075C:  MOVFF  27,73
00760:  MOVFF  26,72
00764:  RCALL  0134
....................       y= (y>>1); 
00766:  BCF    FD8.0
00768:  RRCF   29,F
0076A:  RRCF   28,F
0076C:  RRCF   27,F
0076E:  RRCF   26,F
....................       delay_chon(dl,chondelay);
00770:  MOVFF  70,72
00774:  MOVFF  71,73
00778:  RCALL  044E
....................    } 
0077A:  BRA    077E
....................    else reset_toan_bo_bien();
0077C:  RCALL  0462
0077E:  GOTO   0B64 (RETURN)
.................... 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //32 led: sang don  phai sang trai
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void sang_don_pst_32led(unsigned int8 dl,chondelay)
.................... {       
....................    if(i32>0)
*
00694:  BTFSC  49.7
00696:  BRA    0712
00698:  MOVF   49,W
0069A:  SUBLW  00
0069C:  BC    0712
....................    {
....................       if(j32<i32)
0069E:  MOVF   4A,W
006A0:  XORLW  80
006A2:  MOVWF  00
006A4:  MOVF   49,W
006A6:  XORLW  80
006A8:  SUBWF  00,W
006AA:  BC    06EC
....................       {
....................          y = y_codinh|yp_chay;
006AC:  MOVF   32,W
006AE:  IORWF  2A,W
006B0:  MOVWF  26
006B2:  MOVF   33,W
006B4:  IORWF  2B,W
006B6:  MOVWF  27
006B8:  MOVF   34,W
006BA:  IORWF  2C,W
006BC:  MOVWF  28
006BE:  MOVF   35,W
006C0:  IORWF  2D,W
006C2:  MOVWF  29
....................          xuat_32led_don_1dw(y);
006C4:  MOVFF  29,75
006C8:  MOVFF  28,74
006CC:  MOVFF  27,73
006D0:  MOVFF  26,72
006D4:  RCALL  0134
....................          delay_chon(dl,chondelay);       
006D6:  MOVFF  70,72
006DA:  MOVFF  71,73
006DE:  RCALL  044E
....................          yp_chay = yp_chay <<1;
006E0:  BCF    FD8.0
006E2:  RLCF   2A,F
006E4:  RLCF   2B,F
006E6:  RLCF   2C,F
006E8:  RLCF   2D,F
....................          j32++;
006EA:  INCF   4A,F
....................       }
....................       if (j32==i32) 
006EC:  MOVF   49,W
006EE:  SUBWF  4A,W
006F0:  BNZ   0710
....................       {
....................          i32--;
006F2:  DECF   49,F
....................          j32=0;         
006F4:  CLRF   4A
....................          y_codinh=y;
006F6:  MOVFF  29,35
006FA:  MOVFF  28,34
006FE:  MOVFF  27,33
00702:  MOVFF  26,32
....................          yp_chay = 1;
00706:  CLRF   2D
00708:  CLRF   2C
0070A:  CLRF   2B
0070C:  MOVLW  01
0070E:  MOVWF  2A
....................       }
....................    }
00710:  BRA    0714
....................    else reset_toan_bo_bien();
00712:  RCALL  0462
00714:  GOTO   0B54 (RETURN)
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //32 led: sang don  phai sang trai
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void sang_don_tsp_32led(unsigned int8 dl,chondelay)
.................... {       
....................    if(i32>0)
*
00610:  BTFSC  49.7
00612:  BRA    068E
00614:  MOVF   49,W
00616:  SUBLW  00
00618:  BC    068E
....................    {
....................       if(j32<i32)
0061A:  MOVF   4A,W
0061C:  XORLW  80
0061E:  MOVWF  00
00620:  MOVF   49,W
00622:  XORLW  80
00624:  SUBWF  00,W
00626:  BC    0668
....................       {
....................          y = y_codinh|yt_chay;
00628:  MOVF   32,W
0062A:  IORWF  2E,W
0062C:  MOVWF  26
0062E:  MOVF   33,W
00630:  IORWF  2F,W
00632:  MOVWF  27
00634:  MOVF   34,W
00636:  IORWF  30,W
00638:  MOVWF  28
0063A:  MOVF   35,W
0063C:  IORWF  31,W
0063E:  MOVWF  29
....................          xuat_32led_don_1dw(y);
00640:  MOVFF  29,75
00644:  MOVFF  28,74
00648:  MOVFF  27,73
0064C:  MOVFF  26,72
00650:  RCALL  0134
....................          delay_chon(dl,chondelay);
00652:  MOVFF  70,72
00656:  MOVFF  71,73
0065A:  RCALL  044E
....................          yt_chay = yt_chay >>1;
0065C:  BCF    FD8.0
0065E:  RRCF   31,F
00660:  RRCF   30,F
00662:  RRCF   2F,F
00664:  RRCF   2E,F
....................          j32++;
00666:  INCF   4A,F
....................       }
....................       if (j32==i32) 
00668:  MOVF   49,W
0066A:  SUBWF  4A,W
0066C:  BNZ   068C
....................       {
....................          i32--;
0066E:  DECF   49,F
....................          j32=0;         
00670:  CLRF   4A
....................          y_codinh=y;
00672:  MOVFF  29,35
00676:  MOVFF  28,34
0067A:  MOVFF  27,33
0067E:  MOVFF  26,32
....................          yt_chay = 0x80000000;
00682:  MOVLW  80
00684:  MOVWF  31
00686:  CLRF   30
00688:  CLRF   2F
0068A:  CLRF   2E
....................       }
....................    }
0068C:  BRA    0690
....................    else reset_toan_bo_bien();
0068E:  RCALL  0462
00690:  GOTO   0B44 (RETURN)
.................... 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //32 led: sang don  tu ngoai vao
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... void sang_don_tnt_32led(unsigned int8 dl,chondelay)
.................... {       
....................    if(i16>0)
*
00588:  BTFSC  4C.7
0058A:  BRA    060A
0058C:  MOVF   4C,W
0058E:  SUBLW  00
00590:  BC    060A
....................    {
....................       if(j16<i16)
00592:  MOVF   4D,W
00594:  XORLW  80
00596:  MOVWF  00
00598:  MOVF   4C,W
0059A:  XORLW  80
0059C:  SUBWF  00,W
0059E:  BC    05E2
....................       {
....................          zp = zp_codinh|zp_chay_p;
005A0:  MOVF   44,W
005A2:  IORWF  42,W
005A4:  MOVWF  3E
005A6:  MOVF   45,W
005A8:  IORWF  43,W
005AA:  MOVWF  3F
....................          zt = zt_codinh|zt_chay_t;
005AC:  MOVF   3C,W
005AE:  IORWF  38,W
005B0:  MOVWF  36
005B2:  MOVF   3D,W
005B4:  IORWF  39,W
005B6:  MOVWF  37
....................          xuat_32led_don_2word(zt,zp);
005B8:  MOVFF  37,73
005BC:  MOVFF  36,72
005C0:  MOVFF  3F,75
005C4:  MOVFF  3E,74
005C8:  RCALL  03EC
....................          delay_chon(dl,chondelay);
005CA:  MOVFF  70,72
005CE:  MOVFF  71,73
005D2:  RCALL  044E
.................... 
....................          zp_chay_p = zp_chay_p <<1;         
005D4:  BCF    FD8.0
005D6:  RLCF   42,F
005D8:  RLCF   43,F
....................          zt_chay_t = zt_chay_t >>1;
005DA:  BCF    FD8.0
005DC:  RRCF   39,F
005DE:  RRCF   38,F
....................          j16++;
005E0:  INCF   4D,F
....................       }
....................       if (j16==i16) 
005E2:  MOVF   4C,W
005E4:  SUBWF  4D,W
005E6:  BNZ   0608
....................       {
....................          i16--;
005E8:  DECF   4C,F
....................          j16=0;         
005EA:  CLRF   4D
....................          zt_codinh=zt;  zp_codinh=zp;         
005EC:  MOVFF  37,3D
005F0:  MOVFF  36,3C
005F4:  MOVFF  3F,45
005F8:  MOVFF  3E,44
....................          zp_chay_p = 1;   zt_chay_t = 0x8000;
005FC:  CLRF   43
005FE:  MOVLW  01
00600:  MOVWF  42
00602:  MOVLW  80
00604:  MOVWF  39
00606:  CLRF   38
....................       }
....................    }
00608:  BRA    060C
....................    else reset_toan_bo_bien();
0060A:  RCALL  0462
0060C:  GOTO   0B34 (RETURN)
.................... 
.................... }   
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... //32 led: sang don  tu ngoai vao
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx OK
.................... void sang_don_ttr_32led(unsigned int8 dl,chondelay)
.................... {       
....................    if(i16>0)
*
00500:  BTFSC  4C.7
00502:  BRA    0582
00504:  MOVF   4C,W
00506:  SUBLW  00
00508:  BC    0582
....................    {
....................       if(j16<i16)
0050A:  MOVF   4D,W
0050C:  XORLW  80
0050E:  MOVWF  00
00510:  MOVF   4C,W
00512:  XORLW  80
00514:  SUBWF  00,W
00516:  BC    055A
....................       {
....................          zp = zp_codinh|zp_chay_t;
00518:  MOVF   44,W
0051A:  IORWF  40,W
0051C:  MOVWF  3E
0051E:  MOVF   45,W
00520:  IORWF  41,W
00522:  MOVWF  3F
....................          zt = zt_codinh|zt_chay_p;
00524:  MOVF   3C,W
00526:  IORWF  3A,W
00528:  MOVWF  36
0052A:  MOVF   3D,W
0052C:  IORWF  3B,W
0052E:  MOVWF  37
....................          xuat_32led_don_2word(zt,zp);
00530:  MOVFF  37,73
00534:  MOVFF  36,72
00538:  MOVFF  3F,75
0053C:  MOVFF  3E,74
00540:  RCALL  03EC
....................          delay_chon(dl,chondelay);
00542:  MOVFF  70,72
00546:  MOVFF  71,73
0054A:  RCALL  044E
....................          zp_chay_t = zp_chay_t >>1;         
0054C:  BCF    FD8.0
0054E:  RRCF   41,F
00550:  RRCF   40,F
....................          zt_chay_p = zt_chay_p <<1;
00552:  BCF    FD8.0
00554:  RLCF   3A,F
00556:  RLCF   3B,F
....................          j16++;
00558:  INCF   4D,F
....................       }
....................       if (j16==i16) 
0055A:  MOVF   4C,W
0055C:  SUBWF  4D,W
0055E:  BNZ   0580
....................       {
....................          i16--;
00560:  DECF   4C,F
....................          j16=0;         
00562:  CLRF   4D
....................          zt_codinh=zt;  
00564:  MOVFF  37,3D
00568:  MOVFF  36,3C
....................          zp_codinh=zp;
0056C:  MOVFF  3F,45
00570:  MOVFF  3E,44
....................          zp_chay_t = 0x8000;   zt_chay_p = 1;
00574:  MOVLW  80
00576:  MOVWF  41
00578:  CLRF   40
0057A:  CLRF   3B
0057C:  MOVLW  01
0057E:  MOVWF  3A
....................       }
....................    }
00580:  BRA    0584
....................    else reset_toan_bo_bien();
00582:  RCALL  0462
00584:  GOTO   0B26 (RETURN)
.................... }   
.................... 
.................... 
.................... 
.................... 
.................... #USE        SPI(SPI2)
.................... 
.................... uintmax_t systemTick = 0;
.................... unsigned int8 trangThaiLed; // bien trang thai
.................... int1 testTrangThai = 0;
.................... unsigned int8 bienDem; 
.................... unsigned int8 hangDonVi;
.................... unsigned int8 hangChuc;
.................... 
.................... 
.................... 
.................... #INT_TIMER1
.................... void ngatTimer1()
.................... {
....................    systemTick ++;
*
000E2:  MOVLW  01
000E4:  ADDWF  x68,F
000E6:  BTFSC  FD8.0
000E8:  INCF   x69,F
000EA:  BTFSC  FD8.2
000EC:  INCF   x6A,F
000EE:  BTFSC  FD8.2
000F0:  INCF   x6B,F
....................  
....................   set_timer1(0xffff - 5000);
000F2:  MOVLW  EC
000F4:  MOVWF  FCF
000F6:  MOVLW  77
000F8:  MOVWF  FCE
000FA:  NOP   
000FC:  BCF    F9E.0
000FE:  GOTO   0068
.................... }
.................... 
.................... 
.................... void hardwareInit()
.................... {
....................    setup_counters(RTCC_EXT_L_TO_H,RTCC_DIV_1);
*
00260:  BCF    FD1.0
00262:  MOVLW  A8
00264:  MOVWF  FD5
....................    set_rtcc(0);       
00266:  CLRF   FD7
00268:  CLRF   FD6
0026A:  NOP   
....................    
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1);
0026C:  MOVLW  85
0026E:  MOVWF  FCD
....................    set_timer1(0xffff - 5000);
00270:  MOVLW  EC
00272:  MOVWF  FCF
00274:  MOVLW  77
00276:  MOVWF  FCE
00278:  NOP   
....................    enable_interrupts(INT_TIMER1);
0027A:  BSF    F9D.0
....................    enable_interrupts(GLOBAL);
0027C:  MOVLW  C0
0027E:  IORWF  FF2,F
00280:  GOTO   0A9E (RETURN)
....................    
....................    
.................... }
.................... 
.................... void main()
*
009B4:  CLRF   FF8
009B6:  BCF    FD0.7
009B8:  BSF    07.7
009BA:  CLRF   29
009BC:  CLRF   28
009BE:  CLRF   27
009C0:  CLRF   26
009C2:  CLRF   2D
009C4:  CLRF   2C
009C6:  CLRF   2B
009C8:  MOVLW  01
009CA:  MOVWF  2A
009CC:  MOVLW  80
009CE:  MOVWF  31
009D0:  CLRF   30
009D2:  CLRF   2F
009D4:  CLRF   2E
009D6:  CLRF   35
009D8:  CLRF   34
009DA:  CLRF   33
009DC:  CLRF   32
009DE:  MOVWF  39
009E0:  CLRF   38
009E2:  CLRF   3B
009E4:  MOVLW  01
009E6:  MOVWF  3A
009E8:  CLRF   3D
009EA:  CLRF   3C
009EC:  MOVLW  80
009EE:  MOVWF  41
009F0:  CLRF   40
009F2:  CLRF   43
009F4:  MOVLW  01
009F6:  MOVWF  42
009F8:  CLRF   45
009FA:  CLRF   44
009FC:  CLRF   47
009FE:  CLRF   46
00A00:  CLRF   48
00A02:  MOVLW  20
00A04:  MOVWF  49
00A06:  CLRF   4A
00A08:  MOVLW  01
00A0A:  MOVWF  4B
00A0C:  MOVLW  10
00A0E:  MOVWF  4C
00A10:  CLRF   4D
00A12:  CLRF   51
00A14:  CLRF   50
00A16:  CLRF   4F
00A18:  MOVLW  01
00A1A:  MOVWF  4E
00A1C:  CLRF   55
00A1E:  CLRF   54
00A20:  CLRF   53
00A22:  MOVWF  52
00A24:  SETF   59
00A26:  SETF   58
00A28:  SETF   57
00A2A:  MOVLW  FE
00A2C:  MOVWF  56
00A2E:  MOVLW  80
00A30:  MOVWF  5D
00A32:  CLRF   5C
00A34:  CLRF   5B
00A36:  CLRF   5A
00A38:  MOVWF  x61
00A3A:  CLRF   x60
00A3C:  CLRF   5F
00A3E:  CLRF   5E
00A40:  MOVLW  7F
00A42:  MOVWF  x65
00A44:  SETF   x64
00A46:  SETF   x63
00A48:  SETF   x62
00A4A:  MOVLW  01
00A4C:  MOVWF  x66
00A4E:  MOVWF  x67
00A50:  BCF    F63.5
00A52:  MOVLW  00
00A54:  MOVWF  F64
00A56:  MOVLW  20
00A58:  MOVWF  F63
00A5A:  BCF    F95.4
00A5C:  BSF    F95.5
00A5E:  BCF    F95.6
00A60:  CLRF   x6B
00A62:  CLRF   x6A
00A64:  CLRF   x69
00A66:  CLRF   x68
00A68:  BCF    25.2
00A6A:  MOVF   FC1,W
00A6C:  ANDLW  C0
00A6E:  IORLW  0F
00A70:  MOVWF  FC1
00A72:  MOVLW  07
00A74:  MOVWF  FB4
00A76:  SETF   1B
00A78:  SETF   1C
00A7A:  SETF   1D
00A7C:  SETF   1E
00A7E:  SETF   1F
00A80:  SETF   20
00A82:  SETF   21
00A84:  SETF   22
00A86:  SETF   23
00A88:  SETF   24
00A8A:  BCF    25.0
00A8C:  BCF    25.1
.................... {
....................    setup_adc_ports(NO_ANALOGS, VSS_VDD);
00A8E:  MOVF   FC1,W
00A90:  ANDLW  C0
00A92:  IORLW  0F
00A94:  MOVWF  FC1
....................    set_up_port_ic_chot(); 
00A96:  GOTO   0224
.................... 
....................    hardwareInit();
00A9A:  GOTO   0260
.................... 
....................    while(TRUE)
....................    {
....................    
....................    
....................    bienDem = get_rtcc();
00A9E:  MOVF   FD6,W
00AA0:  MOVWF  x6D
....................    if(bienDem>24)
00AA2:  MOVF   x6D,W
00AA4:  SUBLW  18
00AA6:  BC    0AB0
....................    {
....................      bienDem = 0; 
00AA8:  CLRF   x6D
....................      set_rtcc(0);
00AAA:  CLRF   FD7
00AAC:  CLRF   FD6
00AAE:  NOP   
....................    }
....................    hangDonVi = bienDem%10;
00AB0:  MOVFF  6D,70
00AB4:  MOVLW  0A
00AB6:  MOVWF  x71
00AB8:  CALL   0284
00ABC:  MOVFF  00,6E
....................    hangChuc = bienDem / 10;
00AC0:  MOVFF  6D,70
00AC4:  MOVLW  0A
00AC6:  MOVWF  x71
00AC8:  CALL   0284
00ACC:  MOVFF  01,6F
....................    
....................       if (inputcd(INV) == 0)
00AD0:  MOVLW  7C
00AD2:  MOVWF  x71
00AD4:  MOVLW  0E
00AD6:  MOVWF  x70
00AD8:  BRA    031C
00ADA:  MOVF   01,F
00ADC:  BNZ   0AE8
....................       {
....................          trangThaiLed ++;
00ADE:  INCF   x6C,F
....................          if(trangThaiLed > 9)
00AE0:  MOVF   x6C,W
00AE2:  SUBLW  09
00AE4:  BC    0AE8
....................          {
....................             trangThaiLed = 0;
00AE6:  CLRF   x6C
....................          }
....................       }
....................       xuat_4led_7doan_4so(MA7DOAN[hangChuc],MA7DOAN[hangDonVi] , 0b0111111, MA7DOAN[trangThaiLed]);
00AE8:  CLRF   03
00AEA:  MOVF   x6F,W
00AEC:  CALL   00BE
00AF0:  MOVWF  x70
00AF2:  CLRF   03
00AF4:  MOVF   x6E,W
00AF6:  CALL   00BE
00AFA:  MOVWF  x71
00AFC:  CLRF   03
00AFE:  MOVF   x6C,W
00B00:  CALL   00BE
00B04:  MOVWF  x72
00B06:  MOVFF  70,73
00B0A:  MOVFF  71,74
00B0E:  MOVLW  3F
00B10:  MOVWF  x75
00B12:  MOVFF  72,76
00B16:  CALL   0102
....................       
....................        
....................     if(trangThaiLed == 0)
00B1A:  MOVF   x6C,F
00B1C:  BNZ   0B28
....................     {
....................        sang_don_ttr_32led(200, 0);
00B1E:  MOVLW  C8
00B20:  MOVWF  x70
00B22:  CLRF   x71
00B24:  BRA    0500
....................     } else if(trangThaiLed == 1)
00B26:  BRA    0BB4
00B28:  DECFSZ x6C,W
00B2A:  BRA    0B36
....................     {
....................        sang_don_tnt_32led(200, 0);
00B2C:  MOVLW  C8
00B2E:  MOVWF  x70
00B30:  CLRF   x71
00B32:  BRA    0588
....................     }
00B34:  BRA    0BB4
....................      else if(trangThaiLed == 2)
00B36:  MOVF   x6C,W
00B38:  SUBLW  02
00B3A:  BNZ   0B46
....................     {
....................        sang_don_tsp_32led(200, 0);
00B3C:  MOVLW  C8
00B3E:  MOVWF  x70
00B40:  CLRF   x71
00B42:  BRA    0610
....................     }
00B44:  BRA    0BB4
....................      else if(trangThaiLed == 3)
00B46:  MOVF   x6C,W
00B48:  SUBLW  03
00B4A:  BNZ   0B56
....................     {
....................        sang_don_pst_32led(200, 0);
00B4C:  MOVLW  C8
00B4E:  MOVWF  x70
00B50:  CLRF   x71
00B52:  BRA    0694
....................     }
00B54:  BRA    0BB4
....................      else if(trangThaiLed == 4)
00B56:  MOVF   x6C,W
00B58:  SUBLW  04
00B5A:  BNZ   0B66
....................     {
....................        diem_sang_di_chuyen_tsp_32led(200, 0);
00B5C:  MOVLW  C8
00B5E:  MOVWF  x70
00B60:  CLRF   x71
00B62:  BRA    0718
....................     }
00B64:  BRA    0BB4
....................      else if(trangThaiLed == 5)
00B66:  MOVF   x6C,W
00B68:  SUBLW  05
00B6A:  BNZ   0B76
....................     {
....................        diem_sang_di_chuyen_pst_32led(200, 0);
00B6C:  MOVLW  C8
00B6E:  MOVWF  x70
00B70:  CLRF   x71
00B72:  BRA    0782
....................     }
00B74:  BRA    0BB4
....................      else if(trangThaiLed == 6)
00B76:  MOVF   x6C,W
00B78:  SUBLW  06
00B7A:  BNZ   0B86
....................     {
....................        sang_tat_dan_tsp_32led(200, 0);
00B7C:  MOVLW  C8
00B7E:  MOVWF  x70
00B80:  CLRF   x71
00B82:  BRA    07EC
....................     }
00B84:  BRA    0BB4
....................      else if(trangThaiLed == 7)
00B86:  MOVF   x6C,W
00B88:  SUBLW  07
00B8A:  BNZ   0B96
....................     {
....................        sang_tat_dan_pst_32led(200, 0);
00B8C:  MOVLW  C8
00B8E:  MOVWF  x70
00B90:  CLRF   x71
00B92:  BRA    0864
....................     }
00B94:  BRA    0BB4
....................      else if(trangThaiLed == 8)
00B96:  MOVF   x6C,W
00B98:  SUBLW  08
00B9A:  BNZ   0BA6
....................     {
....................        sang_tat_dan_trai_sang_phai_2x16led(200, 0);
00B9C:  MOVLW  C8
00B9E:  MOVWF  x70
00BA0:  CLRF   x71
00BA2:  BRA    08E6
....................     }
00BA4:  BRA    0BB4
....................      else if(trangThaiLed == 9)
00BA6:  MOVF   x6C,W
00BA8:  SUBLW  09
00BAA:  BNZ   0BB4
....................     {
....................        sang_tat_dan_phai_sang_trai_2x16led(200, 0);
00BAC:  MOVLW  C8
00BAE:  MOVWF  x70
00BB0:  CLRF   x71
00BB2:  BRA    0950
....................     }
00BB4:  BRA    0A9E
....................      
....................     
....................     
....................     
....................    }
....................   
.................... }
.................... 
00BB6:  SLEEP 
.................... 

Configuration Fuses:
   Word  1: C200   HS FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV21 NOWDT WDT32768
   Word  3: 85F3   CCP2C1 LPT1OSC MCLR
   Word  4: 00B1   STVREN NOLVP NOXINST NODEBUG
   Word  5: C0FF   NOPROTECT NOCPB NOCPD
   Word  6: E0FF   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 40FF   NOEBTR NOEBTRB
